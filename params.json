{"name":"Legitjs","tagline":"Lightweight objects and strings validation for Node.js","body":"# legit.js 0.1.0\r\n\r\nLightweight objects and strings validation for Node.js.\r\n\r\n\r\n## Usage\r\n\r\nCreate a schema and use it to validate data.\r\n\r\nThere are two equivalent usages:\r\n- `schema.test(data)`\r\n- `legit.mize(schema, data)`\r\n\r\nThese functions return `null` if there was no error validating the data.\r\nIf the data didn't fit the schema, they return a description of the error (either a String, an Array, or a Map/Object).\r\n\r\n```js\r\n    var schema = legit.Number().min(5).max(10);\r\n    \r\n    var err1 = schema.test(30);  // err1 = 'Greater than max'\r\n    var err2 = schema.test(6);   // err2 = null\r\n    \r\n    // alternative usage:\r\n    err1 = legit.mize(schema, 30);  // err1 = 'Greater than max'\r\n    err2 = legit.mize(schema, 6);   // err2 = null\r\n```\r\n\r\nNote: The keyword \"new\" should not be used when creating an instance of a schema.\r\n\r\n### Real world example\r\n\r\nSuppose you have some incoming network data and you want to validate it before using/processing it.\r\n\r\n```js\r\n    // Create the schema\r\n    var userSchema = legit.Map().strict()\r\n        .key(\"user\", legit.String().min(3).max(20))\r\n        .key(\"age\", legit.Number().min(21));\r\n    \r\n    // Validate incoming data\r\n    var err = userSchema.test(data);\r\n\r\n    if (err) {\r\n        // Data did not fit the schema.\r\n        // Check 'err' to learn what went wrong.\r\n        console.log(err);\r\n    }\r\n    else {\r\n        // Data successfully validated!\r\n        // Now you can use/process it with confidence.\r\n        ...\r\n    }\r\n```\r\n\r\n## Installing and Importing\r\n\r\nUsing [NPM](https://npmjs.org/), run the following command in your project's root directory.\r\n```\r\n$ npm install legitjs\r\n```\r\n\r\nIn your Node.js program:\r\n```js\r\n    var legit = require(\"legitjs\");\r\n```\r\n\r\n## Types Of Schemas\r\n\r\n- [legit.Any()](#legitany)\r\n- [legit.Null()](#legitnull)\r\n- [legit.Boolean()](#legitboolean)\r\n- [legit.Number()](#legitnumber)\r\n- [legit.String()](#legitstring)\r\n- [legit.Array()](#legitarray)\r\n- [legit.Map()](#legitmap)\r\n\r\n\r\n### legit.Any()\r\n\r\nAccepts anything.\r\n\r\nExample:\r\n```js\r\n        var schema = legit.Any();\r\n        schema.test(\"POTATO\")   // null\r\n        schema.test([1, 2, 3])  // null\r\n```\r\n\r\n### legit.Null()\r\n\r\nAccepts only `null`.\r\n\r\nExample:\r\n```js\r\n        var schema = legit.Null();\r\n        schema.test(\"Hello\")    // 'Not null'\r\n        schema.test(null)       // null\r\n```\r\n\r\n### legit.Boolean()\r\n\r\nAccepts only Booleans.\r\n\r\nModifiers:\r\n- `none()`: Accepts `null` and `undefined`.\r\n\r\nExample:\r\n```js\r\n        var schema = legit.Bool();\r\n        schema.test(123)    // 'Not a boolean'\r\n        schema.test(null)   // 'Boolean is null or undefined'\r\n        schema.test(true)   // null\r\n\r\n        var schema2 = legit.Bool().none()\r\n        schema2.test(null)   // null\r\n```\r\n\r\n### legit.Number()\r\n\r\nAccepts only Numbers.\r\n\r\nModifiers:\r\n- `none()`: Accepts `null` and `undefined`.\r\n- `min(a)`: Sets minimum allowed value (`a`).\r\n- `max(b)`: Sets maximum allowed value (`b`).\r\n\r\nExample:\r\n```js\r\n        var schema = legit.Number().min(-5).max(30);\r\n        schema.test(-5);    // null\r\n        schema.test(31);    // 'Greater than maximum'\r\n        schema.test(true);  // 'Not a number'\r\n        schema.test(null);  // 'Number is null or undefined'\r\n```\r\n\r\n### legit.String()\r\n\r\nAccepts only Strings.\r\n\r\nModifiers:\r\n- `none()`: Accepts `null` and `undefined`.\r\n- `min(a)`: Sets minimum allowed length (`a`).\r\n- `max(b)`: Sets maximum allowed length (`b`).\r\n- `regex(e)`: Sets a regular expression to use (`e`).\r\n\r\nExample:\r\n```js\r\n        var schema = legit.String().max(12).regex(/(\\w+)\\s(\\w+)/);\r\n\r\n        schema.test(\"JohnSmith\");\r\n        // 'Regular expression didn't match'\r\n        \r\n        schema.test(\"John Smith\");\r\n        // null\r\n        \r\n        schema.test(\"John R. Smith\");\r\n        // 'Greater than maxmimum'\r\n```\r\n\r\n### legit.Array()\r\n\r\nAccepts only Arrays. Can be used recursively with all other schemas.\r\n\r\nYou have two options when using legit.Array():\r\n- Set a schema to validate all objects of the array by using `.type(schema)` once.\r\n- Set a different schema for each item by using `.item(schema)` once for each item, in the expected order.\r\n\r\nModifiers:\r\n- `none()`: Accepts `null` and `undefined`.\r\n- `min(a)`: Sets minimum allowed length (`a`). Only affects same-type arrays.\r\n- `max(b)`: Sets maximum allowed length (`b`). Only affects same-type arrays.\r\n- `type(s)`: Sets a schema (`s`) to test all array items. Establishes array as same-type.\r\n- `item(s)`: Sets a schema (`s`) to test a single item of the array. Establishes array as different-type.\r\n- `strict()`: Rejects arrays with length greater than expected. Only affects different-type arrays.\r\n\r\nExample:\r\n```js\r\n        // Same-type array\r\n        var schema = legit.Array().max(4)\r\n            .type(legit.Number().min(0).max(10));\r\n\r\n        schema.test([1, 2, 3, 4]);\r\n        // null\r\n        \r\n        schema.test([1, 2, 3, 4, 5]);\r\n        // 'Greater than maxmimum'\r\n        \r\n        schema.test([5, 11]);\r\n        // [null, 'Greater than maximum']\r\n        \r\n        // Different-type array\r\n        var schema = legit.Array().strict()\r\n            .item(legit.String().min(3).max(12))\r\n            .item(legit.Number().min(21));\r\n\r\n        schema.test([\"John Smith\", 25]);\r\n        // null\r\n\r\n        schema.test([\"John\", 25, true]);  \r\n        // [ null, null,\r\n        //   'More items than expected (Array in strict mode)' ]\r\n        \r\n        schema.test([\"John Smith Jr.\", 20]);\r\n        // [ 'Greater than maximum', 'Less than minimum' ]\r\n```\r\n\r\n### legit.Map()\r\n\r\nAccepts only Maps/Objects. Can be used recursively with all other schemas.\r\n\r\nModifiers:\r\n- `none()`: Accepts `null` and `undefined`.\r\n- `strict()`: Rejects maps with unexpected keys.\r\n- `key(n, s)`: Sets an expected key-value pair. `n` is the expected key and `s` is the schema that will be used to validate the value.\r\n\r\nExample:\r\n```js\r\n    var schema = legit.Map().strict()\r\n        .key(\"user\", legit.String().min(3).max(12))\r\n        .key(\"age\", legit.Number().min(21));\r\n\r\n    schema.test({\r\n        \"user\": \"John Smith\",\r\n        \"age\": 25\r\n    }) \r\n        // null\r\n    \r\n    schema.test({\r\n        \"user\": \"John Smith Junior\",\r\n        \"age\": 16\r\n    })\r\n        // { user: 'Greater than maximum',\r\n        //    age: 'Less than minimum' } \r\n```\r\n\r\n## Support/Contact\r\n\r\nFeel free to [contact me](https://github.com/danaugrs) with questions, suggestions, or comments.\r\n\r\nI hope you enjoy using legit.js as much as I enjoyed writing it.\r\n\r\nIf you come across any issues, please [report them](https://github.com/danaugrs/legitjs/issues).\r\n\r\n","google":"UA-43558314-1","note":"Don't delete this file! It's used internally to help with page regeneration."}